{"version":3,"sources":["components/utils/login.js","components/utils/API.js","components/Navbar/index.js","components/Landing/index.js","components/FormGroup/index.js","components/Form/index.js","components/StatusSquare/index.js","components/EquipmentDetailRow/index.js","components/SiteCard/index.js","components/TableHeader/index.js","components/DetailTable/index.js","components/GridHeader/index.js","components/SiteGridView/index.js","components/Dashboard/index.js","components/interface/index.js","App.js","serviceWorker.js","index.js"],"names":["logOut","user","axios","get","login","post","email","password","register","newUser","firstName","lastName","username","findAllSites","editSite","siteObject","idToUpdate","put","editEquipment","equipmentObject","addSite","addEquipment","addEvent","eventObject","editEvent","findEquipmentBySiteId","siteIdtoSearch","deleteSite","idToDelete","delete","deleteEquipment","NavBar","props","loginRegLink","className","to","userLink","onClick","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","href","profile","first_name","last_name","user_id","Landing","Component","FormGroup","formData","map","formItem","index","key","htmlFor","nameFor","label","onChange","handleChange","name","required","placeholder","accountForms","site","equipment","maintenance_event","pathSpecificForm","path","Form","handleFormSubmit","data-id","StatusSquare","classToAdd","squareState","numberOfEvents","scheduledEvent","status","squareClass","console","log","foundEventId","detailClick","toString","data-name","moment","format","EquipmentDetailRow","equipment_id","scope","val","selectDetail","equipment_name","addNewEvent","listOfMaintenanceEventDates","currentYearToCheck","monthFormatArray","monthSquareFormat","i","length","currentDateToCheck","Date","result","isSame","date_scheduled","scheduled","event_id","push","generateSquareFormat","equipmentIDToPopulate","yearlyFrequency","eventData","yearToForecast","everyFreqMonths","Math","round","lastMaintenanceDate","subtract","datetime_scheduled","status_of_maintenance","limitYear","add","isBefore","forecastFutureMonthlyEventColumns","SiteCard","site_id","data-siteid","updateSiteEquipmentDisplayGrid","site_name","address1","TableHeader","siteStructure","equipmentStructure","eventStructure","DetailTable","focusData","detail","keyBasedOffDetail","activateEditMode","clearDetail","colSpan","dataToDisplay","legend","legendLabels","GridHeader","currentSiteName","increaseDecreaseYear","data","activateCreateMode","SiteGridView","currentSiteEquipment","currentSiteEvents","currentSiteId","Dashboard","state","sites","update","currentlyInFocusSiteId","currentlyInFocusEquipmentId","userProfile","findSiteDataFromId","idToSearch","parseInt","findEquipmentDataFromId","findEventDataFromId","e","setState","typeToDetail","target","getAttribute","id","deactivateEditMode","handleFormChange","preventDefault","value","temporaryState","JSON","parse","handleUpdateSubmit","handleCreateSubmit","postcode","API","then","updateSiteInformationAndRender","appendedFormData","idToFocus","focusSite","events","catch","err","idToDetail","focusItem","retrieveDetailGiven","equipmentIdToUse","deleteItem","this","React","Interface","useState","setFormData","setUserProfile","redirect","setRedirect","handleLoginSubmit","userFunctions","res","error","handleRegisterSubmit","renderRedirect","exact","component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b26104ce.chunk.js","sourcesContent":["import axios from \"axios\";\n\n// Register API call\nconst register = newUser => {\n  return axios.post(\"account/register\", {\n    firstName: newUser.firstName,\n    lastName: newUser.lastName,\n    email: newUser.email,\n    username: newUser.username,\n    password: newUser.password\n  });\n};\n\n// Login API call\nconst login = user => {\n  return axios.post(\"account/login\", {\n    email: user.email,\n    password: user.password\n  });\n};\n\n// Logout api call\nconst logOut = user => {\n  return axios.get(\"account/logout\");\n};\n\nexport default {\n  logOut: logOut,\n  login: login,\n  register: register\n};\n","import axios from \"axios\";\nimport { finished } from \"stream\";\n// API calls todb\n// Find all sites\nconst findAllSites = () => {\n  return axios.get(\"api/sites\");\n};\n\n// Find equipment by the site id\nconst findEquipmentBySiteId = siteIdtoSearch => {\n  return axios.get(\"/siteequipment/\" + siteIdtoSearch);\n};\n\n// Edit a site\nconst editSite = (siteObject, idToUpdate) => {\n  return axios.put(\"api/sites/\" + idToUpdate, siteObject);\n};\n\n// Edit equipment\nconst editEquipment = (equipmentObject, idToUpdate) => {\n  return axios.put(\"api/equipment/\" + idToUpdate, equipmentObject);\n};\n\n// Edit event\nconst editEvent = (equipmentObject, idToUpdate) => {\n  return axios.put(\"api/events/\" + idToUpdate, equipmentObject);\n};\n\n// Add event\nconst addEvent = eventObject => {\n  return axios.post(\"api/events/\", eventObject);\n};\n\n// Add site\nconst addSite = siteObject => {\n  return axios.post(\"api/sites/\", siteObject);\n};\n\n// Add equipment\nconst addEquipment = equipmentObject => {\n  return axios.post(\"api/equipment/\", equipmentObject);\n};\n\n// Delete equipment\nconst deleteEquipment = idToDelete => {\n  return axios.delete(\"api/equipment/\" + idToDelete);\n};\n\n// Delete site\nconst deleteSite = idToDelete => {\n  return axios.delete(\"api/sites/\" + idToDelete);\n};\n\nexport default {\n  findAllSites: findAllSites,\n  editSite: editSite,\n  editEquipment: editEquipment,\n  addSite: addSite,\n  addEquipment: addEquipment,\n  addEvent: addEvent,\n  editEvent: editEvent,\n  findEquipmentBySiteId: findEquipmentBySiteId,\n  deleteSite: deleteSite,\n  deleteEquipment: deleteEquipment\n};\n","import React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\n// , Route, Switch\nimport userFunctions from \"../utils/login\";\nimport { useCookies } from \"react-cookie\";\n\n// Functional component\nfunction NavBar(props) {\n  // Log out function\n  const logOut = e => {\n    e.preventDefault();\n    userFunctions.logOut().then(res => {\n      console.log(\"navbar: logout response:\", res);\n    });\n  };\n\n  // Login register links\n  const loginRegLink = (\n    <ul className=\"navbar-nav\">\n      <li className=\"nav-item\">\n        <Link to=\"/login\" className=\"nav-link\">\n          Login\n        </Link>\n      </li>\n      <li className=\"nav-item\">\n        <Link to=\"/register\" className=\"nav-link\">\n          Register\n        </Link>\n      </li>\n    </ul>\n  );\n  // User links\n  const userLink = (\n    <ul className=\"navbar-nav\">\n      <li className=\"nav-item\">\n        <Link to=\"/dashboard\" className=\"nav-link\">\n          Sites\n        </Link>\n      </li>\n      <li className=\"nav-item\">\n        <button onClick={props.logOut}>Log Out</button>\n      </li>\n    </ul>\n  );\n\n  return (\n    <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\n      <button\n        className=\"navbar-toggler\"\n        type=\"button\"\n        data-toggle=\"collapse\"\n        data-target=\"#navbarTogglerDemo01\"\n        aria-controls=\"navbarTogglerDemo01\"\n        aria-expanded=\"false\"\n        aria-label=\"Toggle navigation\"\n      >\n        <span className=\"navbar-toggler-icon\"></span>\n      </button>\n\n      {/* Navbar Brand and links*/}\n      <ul className=\"navbar-nav\">\n        <li className=\"nav-item\">\n          <div className=\"collapse navbar-collapse\">\n            <a className=\"navbar-brand\" href=\"/\">\n              Recurring Works\n            </a>\n            {/* login state */}\n            <span>\n              {props.profile.first_name\n                ? \"Logged In: \" +\n                  props.profile.first_name +\n                  \" \" +\n                  props.profile.last_name\n                : \"Not Logged In\"}\n            </span>\n            {/* place other links on navbar below here */}\n          </div>\n        </li>\n      </ul>\n\n      {/* Login Portion */}\n      {props.profile.user_id ? userLink : loginRegLink}\n\n      <div></div>\n    </nav>\n  );\n}\n\nexport default NavBar;\n","import React, { Component } from \"react\";\n\n// Jumbotron\nclass Landing extends Component {\n  render() {\n    return (\n      <div className=\"jumbotron\">\n        {/* Website title */}\n        <h1 className=\"display-4\">Recurring Works</h1>\n        {/* Subtitle */}\n        <p className=\"lead\">Welcome To Your PPM Tracker</p>\n        <hr className=\"my-4\"></hr>\n        <p>An Empire Project</p>\n      </div>\n    );\n  }\n}\n\nexport default Landing;\n","// import dependencies\nimport React from \"react\";\n\n// Functional component\nfunction FormGroup(props) {\n  return (\n    <>\n      {/* Map through form dta generating labels and inputs */}\n      {props.formData.map((formItem, index) => {\n        return (\n          <div className=\"form-group\" key={index}>\n            {/* Label */}\n            <label htmlFor={formItem.nameFor}>{formItem.label}</label>\n            {/* Input */}\n            <input\n              onChange={props.handleChange}\n              type={formItem.type}\n              name={formItem.nameFor}\n              required\n              className=\"form-control\"\n              placeholder={formItem.placeholder}\n            />\n          </div>\n        );\n      })}\n    </>\n  );\n}\n\nexport default FormGroup;\n","// Import dependencies\nimport React from \"react\";\nimport FormGroup from \"../FormGroup\";\nimport { Route, Switch } from \"react-router-dom\";\nimport \"./style.css\";\n\n// Init account forms object containing form structures\nvar accountForms = {\n  // Login input data\n  login: [\n    {\n      nameFor: \"email\",\n      type: \"email\",\n      label: \"Email Address\",\n      placeholder: \"Email\"\n    },\n    {\n      nameFor: \"password\",\n      type: \"password\",\n      label: \"Password\",\n      placeholder: \"Password\"\n    }\n  ],\n  // Register input data\n  register: [\n    {\n      nameFor: \"email\",\n      type: \"email\",\n      label: \"Email Address\",\n      placeholder: \"Email\"\n    },\n    {\n      nameFor: \"firstName\",\n      type: \"text\",\n      label: \"First Name\",\n      placeholder: \"John\"\n    },\n    {\n      nameFor: \"lastName\",\n      type: \"text\",\n      label: \"Last Name\",\n      placeholder: \"Doe\"\n    },\n    {\n      nameFor: \"username\",\n      type: \"text\",\n      label: \"Username\",\n      placeholder: \"Username\"\n    },\n    {\n      nameFor: \"password\",\n      type: \"password\",\n      label: \"Password\",\n      placeholder: \"Password\"\n    }\n  ],\n  // Site input data\n  site: [\n    {\n      nameFor: \"site_name\",\n      type: \"text\",\n      label: \"Site Name\",\n      placeholder: \"Site Name\"\n    },\n    {\n      nameFor: \"address1\",\n      type: \"text\",\n      label: \"Address 1\",\n      placeholder: \"100 Wilshire Blvd\"\n    },\n    {\n      nameFor: \"address2\",\n      type: \"text\",\n      label: \"Address 2\",\n      placeholder: \"eg. Unit 24\"\n    },\n    {\n      nameFor: \"address3\",\n      type: \"text\",\n      label: \"Address 3\",\n      placeholder: \"Additional Info\"\n    },\n    {\n      nameFor: \"suburb\",\n      type: \"text\",\n      label: \"Suburb\",\n      placeholder: \"Los Angeles\"\n    },\n    {\n      nameFor: \"postcode\",\n      type: \"number\",\n      label: \"Postcode\",\n      placeholder: \"90210\"\n    },\n    {\n      nameFor: \"country\",\n      type: \"text\",\n      label: \"Country\",\n      placeholder: \"USA\"\n    }\n  ],\n  // Equipment input data\n  equipment: [\n    {\n      nameFor: \"equipment_name\",\n      type: \"text\",\n      label: \"Equipment Name\",\n      placeholder: \"Air Conditioner Level 11A\"\n    },\n    {\n      nameFor: \"equipment_description\",\n      type: \"text\",\n      label: \"Equipment Description\",\n      placeholder: \"Found at the West end of the corridor\"\n    },\n    {\n      nameFor: \"custom_serial_name_1\",\n      type: \"text\",\n      label: \"Custom Serial Label 1\",\n      placeholder: \"Custom Serial Name 1\"\n    },\n    {\n      nameFor: \"custom_serial_1\",\n      type: \"text\",\n      label: \"Custom Serial Code 1\",\n      placeholder: \"Custom Serial Code 1\"\n    },\n    {\n      nameFor: \"custom_serial_name_2\",\n      type: \"text\",\n      label: \"Custom Serial Label 2\",\n      placeholder: \"Custom Serial Label 2\"\n    },\n    {\n      nameFor: \"custom_serial_2\",\n      type: \"text\",\n      label: \"Custom Serial Code 2\",\n      placeholder: \"Custom Serial Code 2\"\n    },\n    {\n      nameFor: \"yearlyFrequency\",\n      type: \"number\",\n      label: \"Yearly Frequency (X times per year)\",\n      placeholder: \"3\"\n    }\n  ],\n  // Maintenance event input data\n  maintenance_event: [\n    {\n      nameFor: \"status_of_maintenance\",\n      type: \"text\",\n      label: \"Maintenance Status\",\n      placeholder: \"alert\"\n    },\n    {\n      nameFor: \"status_description\",\n      type: \"text\",\n      label: \"Status Description\",\n      placeholder: \"Regular Bi-annual Maintenance\"\n    },\n    {\n      nameFor: \"datetime_scheduled\",\n      type: \"datetime-local\",\n      label: \"Datetime Scheduled\",\n      placeholder: \"2019-11-30 00:00:00\"\n    }\n  ]\n};\n\n// Function that uses that path variable to determine the type of form to display to the user\nfunction pathSpecificForm(path) {\n  // Dependent on path\n  switch (path) {\n    // If register\n    case \"register\":\n      return accountForms.register;\n    // If login\n    case \"login\":\n      return accountForms.login;\n    // If site\n    case \"site\":\n      return accountForms.site;\n    // If equipment\n    case \"equipment\":\n      return accountForms.equipment;\n    // If maintenance event\n    case \"maintenance_event\":\n      return accountForms.maintenance_event;\n    // If default\n    default:\n      break;\n  }\n}\n\n// Functional component\nfunction Form(props) {\n  return (\n    <div className=\"container form-container\">\n      <form>\n        {/* Form labels and inputs */}\n        <FormGroup\n          //   Using the current React path, determine form to show\n          formData={pathSpecificForm(props.path)}\n          handleChange={props.handleChange}\n        />\n\n        {/* Submission button */}\n        <div>\n          <button\n            onClick={props.handleFormSubmit}\n            type=\"submit\"\n            className=\"btn btn-primary\"\n            data-id={props.idToUpdate}\n          >\n            Submit\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default Form;\n","import React from \"react\";\nimport \"./style.css\";\n\n// Creates square based on monthSquareFormat\nfunction StatusSquare(props) {\n  // Assign base square CSS class to class to use\n  let classToUse = \"square\";\n  // init string with classes to add\n  let classToAdd = \"\";\n  // If an event is found at the month\n  if (props.squareState.numberOfEvents > 0) {\n    // Add class of white to make square white\n    classToAdd = \" white\";\n  }\n  // If the current square is a scheduled event\n  if (props.squareState.scheduledEvent) {\n    // status of current square\n    switch (props.squareState.status) {\n      // if good, make green\n      case \"good\":\n        classToAdd = \" green\";\n        break;\n      // if caution, make yellow\n      case \"caution\":\n        classToAdd = \" yellow\";\n        break;\n      // if alert, make red\n      case \"alert\":\n        classToAdd = \" red\";\n        break;\n      // Leave it as white\n      default:\n        classToAdd = \" unknown\";\n        break;\n    }\n  }\n\n  // String concatenate the classes in new variable\n  let squareClass = classToUse + classToAdd;\n\n  // Build display square\n  console.log(\n    \"props.squareState.foundEventId: \" + props.squareState.foundEventId\n  );\n  // If it was a scheduled event, wrap it in a button that provides detail for update/creation\n  if (props.squareState.foundEventId) {\n    return (\n      <button\n        onClick={props.detailClick}\n        data-id={props.squareState.foundEventId.toString()}\n        data-name=\"maintenance_event\"\n      >\n        <div\n          data-id={props.squareState.foundEventId.toString()}\n          data-name=\"maintenance_event\"\n          className={squareClass}\n        ></div>\n      </button>\n    );\n    // Else make a standard square\n  } else {\n    return <div className={squareClass}></div>;\n  }\n}\n\nexport default StatusSquare;\n","// Import dependencies\nimport React from \"react\";\nimport moment from \"moment\";\nimport StatusSquare from \"../StatusSquare\";\nimport \"./style.css\";\nmoment().format();\n// import axios from \"axios\";\n\n// Forecast future events\nfunction forecastFutureMonthlyEventColumns(\n  equipmentIDToPopulate,\n  yearlyFrequency,\n  eventData,\n  yearToForecast\n) {\n  // While the year is yearToForecast, calculate required frequency months\n  let listOfMaintenanceEventDates = [];\n  // Using yearly frequency, determine every x months\n  let everyFreqMonths = Math.round(12 / yearlyFrequency);\n  // Make the last maintenance default date: a time in the past equal to the required frequency\n  var now = moment();\n  // (This will ensure that if no result is found, the default value will cause next maintenance date to be scheduled for this month)\n  var lastMaintenanceDate = now.subtract(everyFreqMonths, \"months\");\n  // Loop through site data collecting event maintenance dates that are scheduled\n  for (let i = 0; i < eventData.length; i++) {\n    // If match is found, extract relevant details\n    if (eventData[i].equipment_id === equipmentIDToPopulate) {\n      // Assign the date as the last maintenance date until another is found\n      lastMaintenanceDate = moment(eventData[i].datetime_scheduled);\n      // push to list of maintenance event dates array\n      lastMaintenanceDate = moment(eventData[i].datetime_scheduled);\n\n      // push required details to list of maintenance event dates\n      listOfMaintenanceEventDates.push({\n        date_scheduled: lastMaintenanceDate.toString(),\n        scheduled: true,\n        status: eventData[i].status_of_maintenance || false,\n        event_id: eventData[i].event_id\n      });\n    }\n  }\n\n  // Create a new date to represent first day of year after yearToForecast. Used as limit\n  let limitYear = moment(new Date(\"01/01/\" + (yearToForecast + 1)));\n\n  // Forecast next maintenance date and assign\n  lastMaintenanceDate = lastMaintenanceDate.add(everyFreqMonths, \"months\");\n\n  // While the last maintenance date is before the first of the following year\n  while (lastMaintenanceDate.isBefore(limitYear)) {\n    // Push result to array\n    listOfMaintenanceEventDates.push({\n      date_scheduled: lastMaintenanceDate.toString(),\n      scheduled: false,\n      status: eventData.status_of_maintenance\n    });\n    // Reassign last maintenance date with the next forecast date\n    lastMaintenanceDate = lastMaintenanceDate.add(everyFreqMonths, \"months\");\n  }\n\n  // return the total events within the forecast year (forecast and scheduled)\n  return listOfMaintenanceEventDates;\n}\n// Generates square based on maintenance event forecast input\nfunction generateSquareFormat(listOfMaintenanceEventDates, currentYearToCheck) {\n  // Build month format array\n  let monthFormatArray = [\n    \"01\",\n    \"02\",\n    \"03\",\n    \"04\",\n    \"05\",\n    \"06\",\n    \"07\",\n    \"08\",\n    \"09\",\n    \"10\",\n    \"11\",\n    \"12\"\n  ];\n  // init array for pushing result format\n  let monthSquareFormat = [];\n\n  // Iterate through month format array (once for each month) to check if occurence of event within month\n  for (let i = 0; i < monthFormatArray.length; i++) {\n    // Form date based on current month\n    var currentDateToCheck = moment(\n      new Date(monthFormatArray[i] + \"/01/\" + currentYearToCheck)\n    );\n    // Init variables with start values\n    let numberOfEvents = 0;\n    let scheduledEvent = false;\n    let status = false;\n    var result = {};\n    var foundEventId;\n\n    // Iterate through list of maintenance event dates checking if there's a match with the current month we are checking\n    for (let i = 0; i < listOfMaintenanceEventDates.length; i++) {\n      // If the current date to check is within same month as event\n\n      // If the the current date to check is in the same month as the current maintenance date\n      if (\n        currentDateToCheck.isSame(\n          listOfMaintenanceEventDates[i].date_scheduled,\n          \"month\"\n        )\n      ) {\n        // Increment number of events by 1\n        numberOfEvents += 1;\n\n        // If it's a scheduled event. mark scheduled event true\n        if (listOfMaintenanceEventDates[i].scheduled) {\n          // Set scheduled event to true and record status\n          scheduledEvent = true;\n          status = listOfMaintenanceEventDates[i].status;\n          foundEventId = listOfMaintenanceEventDates[i].event_id;\n        }\n      }\n      // Create record\n      result = {\n        numberOfEvents: numberOfEvents,\n        scheduledEvent: scheduledEvent,\n        status: status,\n        foundEventId: foundEventId\n      };\n    }\n    // Push result for current month into result\n    monthSquareFormat.push(result);\n    // Reset variables for loop refresh\n    numberOfEvents = 0;\n    scheduledEvent = false;\n    status = false;\n    result = {};\n    foundEventId = false;\n  }\n\n  return monthSquareFormat;\n}\n\n// Functional component\nfunction EquipmentDetailRow(props) {\n  // Render Row\n  return (\n    <tr key={props.equipment_id}>\n      {/* Table header */}\n      {/* Equipment ID */}\n      <th\n        scope=\"row\"\n        data-name=\"equipment\"\n        data-id={props.val.equipment_id}\n        onClick={props.selectDetail}\n      >\n        {props.val.equipment_id}\n      </th>\n      {/* Equipment Name */}\n      <td>\n        <p>{props.val.equipment_name}</p>\n        {/* Delete button */}\n        <button\n          onClick={props.delete}\n          data-name=\"equipment\"\n          data-id={props.val.equipment_id}\n        >\n          X\n        </button>\n      </td>\n      {/* Add event button */}\n      <td>\n        <button\n          data-name=\"maintenance_event\"\n          data-id={props.val.equipment_id}\n          onClick={props.addNewEvent}\n        >\n          + Event\n        </button>\n      </td>\n      {/* Month data columns */}\n      {/* Feed list of maintenance events produced by forecastFutureMonthlyEvent fn to generateSquareformat and iterate */}\n      {generateSquareFormat(\n        forecastFutureMonthlyEventColumns(\n          props.val.equipment_id,\n          props.val.yearlyFrequency,\n          props.eventData,\n          props.yearToForecast\n        ),\n        props.yearToForecast\n        // Map through resulting values\n      ).map(val => {\n        // Generate a square for each month's value as a table data element\n        return (\n          <td>\n            <StatusSquare squareState={val} detailClick={props.selectDetail} />\n          </td>\n        );\n      })}\n    </tr>\n  );\n}\n\nexport default EquipmentDetailRow;\n","import React from \"react\";\nimport \"./style.css\";\n\n// Functional Component card for each user site\nfunction SiteCard(props) {\n  return (\n    <div className=\"container\">\n      <div className=\"card\">\n        <div key={props.site_id} className=\"card-body\">\n          {/* Button for displaying grid */}\n          <button\n            className=\"btn btn-outline-primary\"\n            data-siteid={props.site_id}\n            onClick={props.updateSiteEquipmentDisplayGrid}\n          >\n            {props.site_name}\n          </button>\n          {/* Address sub detail */}\n          <p className=\"card-text\">{props.address1}</p>\n          {/* Button for more detail on the site */}\n          <button\n            onClick={props.selectDetail}\n            data-name=\"site\"\n            data-id={props.site_id}\n            type=\"button\"\n            className=\"btn btn-outline-primary\"\n          >\n            {/* Icon */}\n            <i\n              onClick={props.selectDetail}\n              data-name=\"site\"\n              data-id={props.site_id}\n              className=\"fas fa-info-circle\"\n            ></i>\n          </button>\n          {/* Button for delete */}\n          <button\n            onClick={props.delete}\n            data-name=\"site\"\n            data-id={props.site_id}\n            type=\"button\"\n            className=\"btn btn-outline-primary\"\n          >\n            {/* Icon */}\n            <i\n              onClick={props.delete}\n              data-name=\"site\"\n              data-id={props.site_id}\n              className=\"fas fa-skull\"\n            ></i>\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default SiteCard;\n","import React from \"react\";\nimport \"./style.css\";\n\n// Functional Component\nfunction TableHeader() {\n  return (\n    // Headers for grid table\n    <thead>\n      <tr>\n        <th scope=\"col\">Equipment ID</th>\n        <th scope=\"col\">Equipment Name</th>\n        <th scope=\"col\">Add new event</th>\n        <th scope=\"col\">January</th>\n        <th scope=\"col\">February</th>\n        <th scope=\"col\">March</th>\n        <th scope=\"col\">April</th>\n        <th scope=\"col\">May</th>\n        <th scope=\"col\">June</th>\n        <th scope=\"col\">July</th>\n        <th scope=\"col\">August</th>\n        <th scope=\"col\">September</th>\n        <th scope=\"col\">October</th>\n        <th scope=\"col\">November</th>\n        <th scope=\"col\">December</th>\n      </tr>\n    </thead>\n  );\n}\n\nexport default TableHeader;\n","import React from \"react\";\nimport \"./style.css\";\n\n// Data key values to use to extract data from focus data to display based on type\nconst siteStructure = [\n  \"address1\",\n  \"address2\",\n  \"address3\",\n  \"suburb\",\n  \"postcode\"\n];\nconst equipmentStructure = [\n  \"equipment_name\",\n  \"equipment_description\",\n  \"custom_serial_name_1\",\n  \"custom_serial_1\",\n  \"custom_serial_name_2\",\n  \"custom_serial_2\",\n  \"yearlyFrequency\"\n];\nconst eventStructure = [\n  \"status_of_maintenance\",\n  \"status_description\",\n  \"datetime_scheduled\"\n];\n\n// return key identifier for label dependent on detail type\nfunction keyBasedOffDetail(detail) {\n  // based off type within detail\n  switch (detail.type) {\n    // if site\n    case \"site\":\n      return \"site_name\";\n    // if equipment\n    case \"equipment\":\n      return \"equipment_name\";\n    // if maintenance event\n    case \"maintenance_event\":\n      return \"event_id\";\n    // if default\n    default:\n      return \"\";\n  }\n}\n\n// display data dependent on detail type\nfunction dataToDisplay(detail) {\n  // based off type within detail\n  switch (detail.type) {\n    // if site\n    case \"site\":\n      return siteStructure;\n    // if equipment\n    case \"equipment\":\n      return equipmentStructure;\n    // if maintenance event\n    case \"maintenance_event\":\n      return eventStructure;\n    // if default\n    default:\n      return \"\";\n  }\n}\n\n// Functional Component\nfunction DetailTable(props) {\n  console.log(\"Detail table props\", props);\n\n  return (\n    // Column size 9 to render detail table\n    <div className=\"col-9 detail-table\">\n      <div className=\"card grid-header\">\n        <div className=\"card-body\">\n          <h5 className=\"card-title\">\n            {/* Label of item based off focused detail key */}\n            {props.focusData[keyBasedOffDetail(props.detail)]}\n          </h5>\n          <h6 className=\"card-subtitle mb-2 text-muted\"></h6>\n          <div className=\"detail-button-container\">\n            {/* Edit button to edit record */}\n            <button onClick={props.activateEditMode} data-name=\"edit\">\n              Edit\n            </button>\n\n            {/* Close button */}\n            <button onClick={props.clearDetail} data-name=\"close\">\n              Close\n            </button>\n          </div>\n          <br />\n        </div>\n      </div>\n\n      {/* Data table */}\n      <table className=\"table table-bordered table-dark\">\n        {/* Header row */}\n        <thead>\n          <tr>\n            <th scope=\"col\">Detail</th>\n            <th colSpan=\"2\" scope=\"col\">\n              Description\n            </th>\n          </tr>\n        </thead>\n        <tbody>\n          {/* Generate Key Value pairs here using detail props */}\n          {dataToDisplay(props.detail).map((val, i) => {\n            // Build table row using table keys stored in siteStructure\n            return (\n              <tr>\n                <th scope=\"row\">{val}</th>\n                <td colSpan=\"2\">{props.focusData[val]}</td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nexport default DetailTable;\n","import React from \"react\";\nimport StatusSquare from \"../StatusSquare\";\nimport \"./style.css\";\n\n// Generate sample of event color codes using object format\nconst legend = [\n  {\n    scheduledEvent: true,\n    numberOfEvents: 1,\n    status: \"good\",\n    event_id: false\n  },\n  {\n    scheduledEvent: true,\n    numberOfEvents: 1,\n    status: \"caution\",\n    event_id: false\n  },\n  {\n    scheduledEvent: true,\n    numberOfEvents: 1,\n    status: \"alert\",\n    event_id: false\n  },\n  {\n    scheduledEvent: true,\n    numberOfEvents: 1,\n    status: \"unknown\",\n    event_id: false\n  },\n  {\n    scheduledEvent: false,\n    numberOfEvents: 1,\n    status: false,\n    event_id: false\n  }\n];\n\n// Array of legend labels\nconst legendLabels = [\n  \"Status: Good\",\n  \"Status: Caution\",\n  \"Status: Alert\",\n  \"Status: Unknown\",\n  \"Status: Due. Not scheduled Yet\"\n];\n\n// Functional component\nfunction GridHeader(props) {\n  return (\n    // Grid header\n    <div className=\"card grid-header\">\n      <div className=\"card-body\">\n        {/* Site title */}\n        <h5 className=\"card-title\">{props.currentSiteName}</h5>\n        {/* Year */}\n        <h6 className=\"card-subtitle mb-2 text-muted\">\n          Year:{props.yearToForecast}\n        </h6>\n        {/* Year manipulation buttons */}\n        <button onClick={props.increaseDecreaseYear} data-name=\"-\">\n          -\n        </button>\n\n        <button onClick={props.increaseDecreaseYear} data-name=\"+\">\n          +\n        </button>\n        <br />\n        {/* Legend */}\n        <div className=\"container legend-container\">\n          <h5>Legend</h5>\n          <div className=\"row\">\n            {legend.map((data, i) => {\n              return (\n                <div className=\"col-2 legend-box\">\n                  <StatusSquare squareState={data} />\n                  <p>\n                    <span className=\"legend-label\">{legendLabels[i]}</span>\n                  </p>\n                </div>\n              );\n            })}\n          </div>\n          <div className=\"container\">\n            <div className=\"col-2\">\n              {/* Add new equipment button */}\n              <button data-name=\"equipment\" onClick={props.activateCreateMode}>\n                Add New Equipment\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default GridHeader;\n","import React from \"react\";\nimport GridHeader from \"../GridHeader\";\nimport TableHeader from \"../TableHeader\";\nimport EquipmentDetailRow from \"../EquipmentDetailRow\";\nimport \"./style.css\";\n\n// Functional component of site grid view table\nfunction SiteGridView(props) {\n  return (\n    // Column of size 9\n    <div className=\"col-9\">\n      {/* Grid header */}\n      <GridHeader\n        increaseDecreaseYear={props.increaseDecreaseYear}\n        currentSiteName={props.currentSiteName}\n        yearToForecast={props.yearToForecast}\n        activateCreateMode={props.activateCreateMode}\n      />\n      {/* Table header */}\n      <table className=\"table table-responsive table-sm table-dark\">\n        <TableHeader />\n\n        {/* Table body */}\n        <tbody>\n          {/* Iterate through the current site equipment and form detail */}\n          {props.currentSiteEquipment.map((val, index) => {\n            return (\n              <EquipmentDetailRow\n                key={index}\n                val={val}\n                selectDetail={props.selectDetail}\n                eventData={props.currentSiteEvents}\n                yearToForecast={props.yearToForecast}\n                addNewEvent={props.addNewEvent}\n                currentSiteId={props.currentSiteId}\n                delete={props.delete}\n              />\n            );\n          })}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nexport default SiteGridView;\n","// Import dependencies\nimport React, { Component } from \"react\";\nimport axios from \"axios\";\nimport EquipmentDetailRow from \"../EquipmentDetailRow\";\nimport SiteCard from \"../SiteCard\";\nimport TableHeader from \"../TableHeader\";\nimport DetailTable from \"../DetailTable\";\nimport SiteGridView from \"../SiteGridView\";\nimport \"./style.css\";\nimport Form from \"../Form\";\nimport API from \"../utils/API\";\n\n// Class Dashboard\nclass Dashboard extends React.Component {\n  // State variables\n  state = {\n    sites: [],\n    currentSiteEquipment: [],\n    currentSiteEvents: [],\n    detail: false,\n    yearToForecast: 2019,\n    focusData: {},\n    update: false,\n    formData: {},\n    // For creating new records\n    currentlyInFocusSiteId: 0,\n    currentlyInFocusEquipmentId: 0,\n    userProfile: {}\n  };\n\n  // ID search functions\n  // Find Site data in state datafrom ID\n  findSiteDataFromId = idToSearch => {\n    // Iterate through data searching for match\n    for (let i = 0; i < this.state.sites.length; i++) {\n      // If match found extract data\n      if (this.state.sites[i].site_id === parseInt(idToSearch)) {\n        // Return data\n        return this.state.sites[i];\n      }\n    }\n  };\n  // Find equipment data in state data from ID\n  findEquipmentDataFromId = idToSearch => {\n    // Iterate through data searching for match\n    for (let i = 0; i < this.state.currentSiteEquipment.length; i++) {\n      // If match found extract data\n      if (\n        this.state.currentSiteEquipment[i].equipment_id === parseInt(idToSearch)\n      ) {\n        var result = this.state.currentSiteEquipment[i];\n        // Return result\n        return result;\n      }\n    }\n  };\n  // Find event data in state data from ID\n  findEventDataFromId = idToSearch => {\n    // Iterate through data searching for match\\\n    for (let i = 0; i < this.state.currentSiteEvents.length; i++) {\n      // If match found extract data\n      if (this.state.currentSiteEvents[i].event_id === parseInt(idToSearch)) {\n        var result = this.state.currentSiteEvents[i];\n        // Return result\n        return result;\n      }\n    }\n  };\n\n  // Activates edit mode by changing state of update variable\n  activateEditMode = e => {\n    this.setState({\n      update: true\n    });\n  };\n\n  // Activates create mode by changing state of update and applying a detail with no id to provide form path\n  activateCreateMode = e => {\n    // Grab data-name attribute from click element\n    let typeToDetail = e.target.getAttribute(\"data-name\");\n\n    // set update to true and provide a type to ensure the form displays proper form fields\n    this.setState({\n      update: true,\n      detail: {\n        type: typeToDetail,\n        id: false\n      }\n    });\n  };\n\n  // Deactivates edit mode by changing state to false\n  deactivateEditMode = e => {\n    this.setState({\n      update: false\n    });\n  };\n\n  // Handles form changes and saves into an object\n  handleFormChange = e => {\n    e.preventDefault();\n    // Extract name and value information from event\n    var name = e.target.name;\n    let value = e.target.value;\n    // Extract temporary state\n    let temporaryState = this.state.formData;\n\n    // Add the current changes to the temporary state\n    temporaryState[name] = value;\n\n    // Replace form data with current temporary state\n    this.setState({\n      formData: temporaryState\n    });\n  };\n\n  // Handle form submit dependent on the presence of data-id on the clicked element\n  handleFormSubmit = e => {\n    // Parse the data-id attribute value as boolean as it's currently in string format\n    let update = JSON.parse(e.target.getAttribute(\"data-id\"));\n    // If the update is true\n    if (update) {\n      // handle form submit as update\n      this.handleUpdateSubmit(e);\n    } else {\n      // handle form submit as create\n      this.handleCreateSubmit(e);\n    }\n  };\n\n  // Handle a form submission as an update to record\n  handleUpdateSubmit = e => {\n    e.preventDefault();\n    // Depending on state variable detail's type value, perform different functions\n    switch (this.state.detail.type) {\n      // If type is site\n      case \"site\":\n        // Parse int values required to be integer\n        this.state.formData.postcode = parseInt(this.state.formData.postcode);\n\n        // Post API call to server to edit site using data-id value of event\n        API.editSite(\n          this.state.formData,\n          e.target.getAttribute(\"data-id\")\n          // Then\n        ).then(data => {\n          // Update the site information and render, then proceed to deactivate edit mode\n          this.updateSiteInformationAndRender().then(this.deactivateEditMode);\n        });\n        break;\n      case \"equipment\":\n        // Post API call to server to edit equipment using data-id value of event\n        API.editEquipment(\n          this.state.formData,\n          e.target.getAttribute(\"data-id\")\n          // Then\n        ).then(data => {\n          // Update the site information and render, then proceed to deactivate edit mode\n          this.updateSiteInformationAndRender().then(this.deactivateEditMode());\n        });\n        break;\n      case \"maintenance_event\":\n        API.editEvent(\n          this.state.formData,\n          e.target.getAttribute(\"data-id\")\n          // Then\n        ).then(data => {\n          // Update the site information and render, then proceed to deactivate edit mode\n          this.updateSiteInformationAndRender().then(this.deactivateEditMode());\n        });\n        break;\n    }\n  };\n\n  // Handle a form submission as a new record\n  handleCreateSubmit = e => {\n    e.preventDefault();\n    let appendedFormData = this.state.formData;\n\n    // Switch based on detail type\n    switch (this.state.detail.type) {\n      // If site\n      case \"site\":\n        // Parse postcode as int\n        this.state.formData.postcode = parseInt(this.state.formData.postcode);\n\n        // Post API call to create new site\n        API.addSite(this.state.formData).then(data => {\n          // Update the site information and render, then proceed to deactivate edit mode\n          this.updateSiteInformationAndRender().then(this.deactivateEditMode);\n        });\n        break;\n      case \"equipment\":\n        appendedFormData = this.state.formData;\n\n        appendedFormData.site_id = this.state.currentlyInFocusSiteId;\n\n        // Post API call to create new equipment\n        API.addEquipment(appendedFormData).then(data => {\n          // Update the site information and render, then proceed to deactivate edit mode\n          this.updateSiteInformationAndRender().then(this.deactivateEditMode());\n        });\n        break;\n      case \"maintenance_event\":\n        appendedFormData.site_id = this.state.currentlyInFocusSiteId;\n        appendedFormData.equipment_id = this.state.currentlyInFocusEquipmentId;\n\n        // Post API call to create new site\n        API.addEvent(appendedFormData).then(data => {\n          // Update the site information and render, then proceed to deactivate edit mode\n          this.updateSiteInformationAndRender().then(this.deactivateEditMode());\n        });\n        break;\n    }\n  };\n\n  // Event listener for grabbing equipment associated with a site and displaying grid\n  updateSiteEquipmentDisplayGrid = e => {\n    // Using the id of the Site card button\n    let idToFocus = e.target.getAttribute(\"data-siteid\");\n    // Use site data-id to find site id from state vriables\n    const focusSite = this.findSiteDataFromId(idToFocus);\n\n    // GET API call to retrieve events and equipment details\n    axios\n      .get(\"/api/siteequipment/\" + idToFocus)\n      .then(data => {\n        // Store in state\n        this.setState({\n          currentSiteEquipment: data.data.equipment,\n          currentSiteEvents: data.data.events,\n          focusData: focusSite,\n          detail: false,\n          currentlyInFocusSiteId: idToFocus\n        });\n      })\n      // Catch if error\n      .catch(err => {\n        console.log(err);\n      });\n  };\n\n  // When component mounts, make API call to get sites data\n  componentDidMount() {\n    this.updateSiteInformationAndRender();\n  }\n\n  // Function containing API call for populating state variable sites data\n  updateSiteInformationAndRender() {\n    // GET API call\n    return axios.get(\"/api/sites\").then(data => {\n      // Set sites variable\n      this.setState({\n        sites: data.data,\n        currentSiteEquipment: [],\n        currentSiteEvents: []\n      });\n    });\n  }\n\n  // Function that sets detail of state with clicked item and retrieves record values to place in focus\n  selectDetail = e => {\n    // Extract event target variables as required\n    let idToDetail = e.target.getAttribute(\"data-id\");\n    let typeToDetail = e.target.getAttribute(\"data-name\");\n\n    // Create focus data based off of the details in the event.target\n    const focusItem = this.retrieveDetailGiven(typeToDetail, idToDetail);\n\n    // Set state updates to detail and focus data\n    this.setState({\n      detail: {\n        type: typeToDetail,\n        id: idToDetail\n      },\n      focusData: focusItem\n    });\n  };\n\n  // Retrieve detail given type and id within detail state variable\n  retrieveDetailGiven = (type, id) => {\n    // dependent on type\n    switch (type) {\n      // If site\n      case \"site\":\n        // return site data from ID\n        return this.findSiteDataFromId(id);\n      // If equipment\n      case \"equipment\":\n        // return equipment data from ID\n        return this.findEquipmentDataFromId(id);\n      // If maintenance event\n      case \"maintenance_event\":\n        // return event data from ID\n        return this.findEventDataFromId(id);\n      default:\n        return false;\n    }\n  };\n\n  // Clear the current value of detail in state\n  clearDetail = e => {\n    //   Clear state variable detail (set to false)\n    this.setState({\n      detail: false\n    });\n  };\n\n  // Event handler for year button above grid that allows user to increment/decrement target yera\n  increaseDecreaseYear = e => {\n    // Grab data-name from event target\n    const action = e.target.getAttribute(\"data-name\");\n    // If action is \"+\"\n    if (action === \"+\") {\n      // Increment yearToForecast variable\n      this.setState({\n        yearToForecast: this.state.yearToForecast + 1\n      });\n      // If action is \"-\"\n    } else {\n      // Decrement yearToForecast variable\\\n      this.setState({\n        yearToForecast: this.state.yearToForecast - 1\n      });\n    }\n  };\n\n  // Event handler for creating a new event\n  addNewEvent = e => {\n    // Ensure that the equipment to update is recorded\n    let equipmentIdToUse = e.target.getAttribute(\"data-id\");\n    // Update state with id to use\n    this.setState({\n      currentlyInFocusEquipmentId: equipmentIdToUse\n    });\n    // Activate create mode\n    this.activateCreateMode(e);\n  };\n\n  // Delete item event handler\n  deleteItem = e => {\n    let name = e.target.getAttribute(\"data-name\");\n    let idToDelete = e.target.getAttribute(\"data-id\");\n\n    // Depending on item clicked, make deletion API call\n    switch (name) {\n      case \"equipment\":\n        API.deleteEquipment(idToDelete).then(data => {\n          this.updateSiteInformationAndRender();\n        });\n        break;\n      case \"site\":\n        API.deleteSite(idToDelete).then(data => {\n          this.updateSiteInformationAndRender();\n        });\n        break;\n    }\n  };\n\n  render() {\n    return (\n      // Dashboard container\n      <div className=\"container-fluid\">\n        <div className=\"row\">\n          {/* Site navigation pane */}\n          <div className=\"col-3\">\n            {/* Button to create new site */}\n            <button data-name=\"site\" onClick={this.activateCreateMode}>\n              New Site\n            </button>\n            {/* <button data-name=\"site\" onClick={this.printState}>\n              Print State\n            </button> */}\n            {/* For each site in state data, return a Site card */}\n            {this.state.sites.map((val, index) => {\n              return (\n                // Return site card containing brief information and links\n                <SiteCard\n                  key={index}\n                  site_id={val.site_id}\n                  updateSiteEquipmentDisplayGrid={\n                    this.updateSiteEquipmentDisplayGrid\n                  }\n                  selectDetail={this.selectDetail}\n                  address1={val.address1}\n                  site_name={val.site_name}\n                  delete={this.deleteItem}\n                />\n              );\n            })}\n          </div>\n          {/* If there is no current detail in focus */}\n          {!this.state.detail ? (\n            // Display the site grid system\n            <SiteGridView\n              increaseDecreaseYear={this.increaseDecreaseYear}\n              currentSiteName={this.state.focusData.site_name}\n              yearToForecast={this.state.yearToForecast}\n              currentSiteEvents={this.state.currentSiteEvents}\n              currentSiteEquipment={this.state.currentSiteEquipment}\n              selectDetail={this.selectDetail}\n              activateCreateMode={this.activateCreateMode}\n              addNewEvent={this.addNewEvent}\n              currentSiteId={this.state.currentlyInFocusSiteId}\n              delete={this.deleteItem}\n            />\n          ) : // If update mode activated,\n          this.state.update ? (\n            // show column with form\n            <div className=\"col-9\">\n              {/* Place site information  at top */}\n              <span>{this.state.focusData.site_name}</span>\n              {/* Container for edit buttons */}\n              <div className=\"edit-buttons\">\n                <button\n                  className=\"close-edit-button\"\n                  onClick={this.deactivateEditMode}\n                >\n                  Close Edit\n                </button>\n              </div>\n              {/* Button to deactivate edit mode */}\n              {/* Form */}\n              <Form\n                path={this.state.detail.type}\n                handleChange={this.handleFormChange}\n                handleFormSubmit={this.handleFormSubmit}\n                idToUpdate={this.state.detail.id}\n              />\n            </div>\n          ) : (\n            //   Else, show detail table}\n            <>\n              <DetailTable\n                clearDetail={this.clearDetail}\n                focusData={this.state.focusData}\n                activateEditMode={this.activateEditMode}\n                detail={this.state.detail}\n              />\n            </>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Dashboard;\n","import React, { useState } from \"react\";\n// import { BrowserRouter as Router, Link } from \"react-router-dom\";\n// , Route, Switch\nimport userFunctions from \"../utils/login\";\nimport API from \"../utils/API\";\nimport NavBar from \"../Navbar\";\nimport Landing from \"../Landing\";\nimport Form from \"../Form\";\nimport Dashboard from \"../Dashboard\";\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch,\n  Redirect\n} from \"react-router-dom\";\nimport { set } from \"date-fns\";\n\n// React Hook component\nfunction Interface(props) {\n  // React Hook variables\n  var [formData, setFormData] = useState({});\n  var [userProfile, setUserProfile] = useState({});\n  var [redirect, setRedirect] = useState(false);\n\n  // Redirection renderer. If state value is true, redirect\n  const renderRedirect = () => {\n    if (redirect) {\n      return <Redirect to=\"/login\"></Redirect>;\n    }\n  };\n\n  // log out function\n  const logOut = e => {\n    e.preventDefault();\n    userFunctions.logOut().then(res => {\n      if (res.status === 200) {\n        setUserProfile(false);\n      } else {\n        console.error(\"Error encountered\");\n      }\n    });\n  };\n\n  // Handle form change for login\n  const handleFormChange = e => {\n    e.preventDefault();\n    // Extract values from event\n    var name = e.target.name;\n    let value = e.target.value;\n    // Copy current form data for appending\n    let temporaryState = formData;\n\n    // Create new value within temporary state and set\n    temporaryState[name] = value;\n    setFormData(temporaryState);\n  };\n\n  // Handle login submission\n  const handleLoginSubmit = e => {\n    e.preventDefault();\n    // Send login request using userFunctions\n    userFunctions\n      .login(formData)\n      .then(res => {\n        // Set user profile if successful\n        setUserProfile(res.data);\n      })\n      .catch(err => {\n        console.error(err);\n      });\n  };\n\n  // Handle register submission\n  const handleRegisterSubmit = e => {\n    e.preventDefault();\n    userFunctions\n      .register(formData)\n      .then(res => {\n        setRedirect(true);\n      })\n      .catch(err => {\n        console.error(err);\n      });\n  };\n\n  return (\n    <>\n      <Router>\n        {/* Redirection used for registration completion */}\n        {renderRedirect()}\n        <NavBar profile={userProfile} logOut={logOut} />\n        <Switch>\n          {/* Landing Page */}\n          <Route exact path=\"/\" component={Landing} />\n\n          {/* Login Page */}\n          <Route\n            exact\n            path=\"/login\"\n            component={() =>\n              // If profile data exists\n              userProfile.first_name ? (\n                // Redirect\n                <Redirect to=\"/\" />\n              ) : (\n                // else show form\n                <div className=\"container\">\n                  <Form\n                    path=\"login\"\n                    handleChange={handleFormChange}\n                    handleFormSubmit={handleLoginSubmit}\n                  />\n                </div>\n              )\n            }\n          />\n          {/* Register Page */}\n          <Route\n            exact\n            path=\"/register\"\n            component={() =>\n              // If profile data exists\n              userProfile.first_name ? (\n                // Redirect\n                <Redirect to=\"/\" />\n              ) : (\n                // else show form\n                <div className=\"container\">\n                  <Form\n                    path=\"register\"\n                    handleChange={handleFormChange}\n                    handleFormSubmit={handleRegisterSubmit}\n                  />\n                </div>\n              )\n            }\n          />\n          {/* Sites page */}\n          <Route exact path=\"/dashboard\" component={() => <Dashboard />} />\n          <Route exact path=\"/site\" component={() => <Dashboard />} />\n        </Switch>\n      </Router>\n    </>\n  );\n}\n\nexport default Interface;\n","import React from \"react\";\nimport \"./App.css\";\nimport Interface from \"./components/interface\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Interface />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { CookiesProvider } from \"react-cookie\";\n\nReactDOM.render(\n  <CookiesProvider>\n    <App />\n  </CookiesProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}